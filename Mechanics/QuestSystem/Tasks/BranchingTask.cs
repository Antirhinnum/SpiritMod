using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace SpiritMod.Mechanics.QuestSystem.Tasks
{
	public class BranchingTask : QuestTask
	{
		public override string ModCallName => "##";
        public IEnumerable<QuestTask> Tasks { get; }

		/// <summary>
		/// Stores the index of the completed task in this branching task, so that other clients can properly complete that specific task.<br/>
		/// This stops "completed" <see cref="BranchingTask"/>s from being skipped altogether when synced in <see cref="Quest.RunCompletion(int)"/>.<br/>
		/// This is also the value passed to <see cref="Quest.RunCompletion(int)"/>.
		/// </summary>
		internal byte taskSlotForMP = byte.MaxValue;

        public BranchingTask() { }

		public BranchingTask(params QuestTask[] tasks)
		{
			Tasks = tasks;
		}

		public override QuestTask Parse(object[] args)
		{
			return null;
		}

		public override void AutogeneratedBookText(List<string> lines)
		{
			foreach (QuestTask task in Tasks)
			{
				task.GetBookText(lines);
			}
		}

		public override void AutogeneratedHUDText(List<string> lines)
		{
			foreach (QuestTask task in Tasks)
			{
				task.GetHUDText(lines);
			}
		}

		public override void ResetProgress()
		{
			base.ResetProgress();
			NextTask = null;
			foreach (QuestTask task in Tasks)
			{
				task.ResetProgress();
			}
		}

		public override void Activate(Quest fromQuest)
		{
			foreach (QuestTask task in Tasks)
				task.Activate(fromQuest);
			base.Activate(fromQuest);
		}

		public override void Deactivate()
		{
			foreach (QuestTask task in Tasks)
				task.Deactivate();
			base.Deactivate();
		}

		public override bool CheckCompletion()
		{
			foreach (QuestTask task in Tasks)
			{
				if (task.CheckCompletion())
				{
					taskSlotForMP = (byte)Tasks.ToList().IndexOf(task);
					NextTask = task.NextTask;
					return true;
				}
			}

			return false;
		}

		public override void OnMPSyncTick()
		{
			foreach (QuestTask section in Tasks)
			{
				section.OnMPSyncTick();
			}
		}

		public override void ReadData(BinaryReader reader)
		{
			foreach (QuestTask section in Tasks)
			{
				section.ReadData(reader);
			}
		}

		public override void WriteData(BinaryWriter writer)
		{
			foreach (QuestTask section in Tasks)
			{
				section.WriteData(writer);
			}
		}
	}
}
